function [preamble] = getPreamble(model_name, cplex_struct, threads)
%GETPREAMBLE This function returns a string containing the preable of a
%model. Here the solution folder, the optimality gap, the threads and the time limit are
%specified. If no thread number is specified, the default cplex settings
%are applied 
% $Author: Eugenio Moro $	$Date: 2020/12/10 09:58:47 $	$Revision: 0.1 $
% Copyright: Politecnico di Milano 2020

if nargin < 3
    threads_string = '';
else
    threads_string = ['  cplex.threads = ' num2str(threads) ';		 // Number of Max Threads for Parallel Computing'];
end
   
preamble = [...
    'string output_filename = ...;' newline ...
    'execute{' newline ...
    '  output_filename = "../solutions/"+"' model_name '_"+output_filename;' newline ...
    '}' newline ...
    'execute PARAMS {' newline ...
    threads_string newline...
    ];
    cplex_fields = fieldnames(cplex_struct);
    cplex_section = '';
    for cplex_par=1:numel(cplex_fields)
    param_value = ['  cplex.' cplex_fields{cplex_par} ' = ' num2str(cplex_struct.(cplex_fields{cplex_par}){1}) ';'];
    added_spaces = repmat(' ',[1, 40 - numel(param_value)]);
    param_value = [param_value added_spaces];
   % cplex_section = [ cplex_section ...
    %    '  cplex.' cplex_fields{cplex_par} ' = ' num2str(cplex_struct.(cplex_fields{cplex_par}){1}) ';			   // ' ...
     %   cplex_struct.(cplex_fields{cplex_par}){2}  newline ...
  %  ];
    cplex_section = [ cplex_section ...
        param_value '// ' ...
        cplex_struct.(cplex_fields{cplex_par}){2}  newline ...
    ];
    
    end
    
   % '  cplex.epgap = ' num2str(opti_gap) ';                         // Tolerated Optimality Gap' newline ...
   % '  cplex.tilim = ' num2str(time_lim) ';			   // Time Limit in Seconds' newline ...
   
   preamble = [ preamble cplex_section ...    
    '}' newline newline 'float temp;                        // Initial time' newline ...
    'execute{' newline '  var before = new Date();' newline '  temp = before.getTime();' newline '}' newline...
    ];    
end
